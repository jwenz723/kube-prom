apiVersion: v1
kind: Namespace
metadata:
  name: prommon
---
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: prometheus-persistent-volume
#   namespace: prommon
#   labels:
#     type: local
# spec:
#   storageClassName: manual
#   capacity:
#     storage: 10Gi
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: "/tmp/prometheus"
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: prometheus-persistent-volume-claim
#   namespace: prommon
# spec:
#   storageClassName: manual
#   accessModes:
#     - ReadWriteOnce
#   resources:
#     requests:
#       storage: 10Gi
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: prometheus-pv-volume
  namespace: prommon
  labels:
    type: local
    app: prometheus
  annotations:
    pv.beta.kubernetes.io/gid: "2000"
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    # The directory /mnt/prometheus must exist before creating this PersistentVolume and it needs to have proper write access (like 777)
    path: "/mnt/prometheus"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: prometheus-pv-claim
  namespace: prommon
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  selector:
    matchLabels:
      app: "prometheus"
---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: grafana-pv-volume
  namespace: prommon
  labels:
    type: local
    app: grafana
  annotations:
    pv.beta.kubernetes.io/gid: "472"
spec:
  storageClassName: manual
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    # The directory /mnt/grafana must exist before creating this PersistentVolume and it needs to have proper write access (like 777)
    path: "/mnt/grafana"
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: grafana-pv-claim
  namespace: prommon
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  selector:
    matchLabels:
      app: "grafana"
---
apiVersion: v1
data:
  prometheus.yml: |
    global:
      scrape_interval: 1s
    scrape_configs:
      # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L37
      - job_name: 'kubernetes-nodes'
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__address__]
            regex: '(.*):10250'
            replacement: '${1}:10255'
            target_label: __address__
          - source_labels: [instance]
            action: replace
            target_label: node_name
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      - job_name: 'kubernetes-cadvisor'
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - source_labels: [__address__]
            regex: '(.*):10250'
            replacement: '${1}:10255'
            target_label: __address__
          - source_labels: [instance]
            action: replace
            target_label: node_name
          - target_label: __metrics_path__
            replacement: /metrics/cadvisor
          - action: labelmap
            regex: __meta_kubernetes_node_label_(.+)

      # https://github.com/prometheus/prometheus/blob/master/documentation/examples/prometheus-kubernetes.yml#L79
      # - job_name: 'kubernetes-endpoints'
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #   relabel_configs:
      #     - action: labelmap
      #       regex: __meta_kubernetes_pod_label_(.+)
      #     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
      #       action: keep
      #       regex: true
      #     - source_labels: [__meta_kubernetes_pod_name]
      #       regex: (.*)
      #       action: replace
      #       target_label: pod_name
      #     - source_labels: [__meta_kubernetes_pod_node_name]
      #       regex: (.*)
      #       action: replace
      #       target_label: node_name
      #     - regex: 'controller_revision_hash|pod_template_generation|pod_template_hash'
      #       action: labeldrop

      - job_name: 'prometheus'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: 'prometheus'
            action: keep
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_name]
            regex: (.*)
            action: replace
            target_label: pod_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            regex: (.*)
            action: replace
            target_label: node_name
          - regex: 'controller_revision_hash|pod_template_generation|pod_template_hash'
            action: labeldrop

      - job_name: 'node'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: 'node-exporter'
            action: keep
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_name]
            regex: (.*)
            action: replace
            target_label: pod_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            regex: (.*)
            action: replace
            target_label: node_name
          - regex: 'controller_revision_hash|pod_template_generation|pod_template_hash'
            action: labeldrop

      - job_name: 'node-test'
        kubernetes_sd_configs:
          - role: endpoints
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_label_app]
            regex: 'node-exporter-test'
            action: keep
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_name]
            regex: (.*)
            action: replace
            target_label: pod_name
          - source_labels: [__meta_kubernetes_pod_node_name]
            regex: (.*)
            action: replace
            target_label: node_name
          - regex: 'controller_revision_hash|pod_template_generation|pod_template_hash'
            action: labeldrop
kind: ConfigMap
metadata:
  creationTimestamp: null
  name: prometheus-config
  namespace: prommon
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: prometheus
  namespace: prommon
spec:
  replicas: 1
  minReadySeconds: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      securityContext:
        runAsUser: 0
      serviceAccountName: prometheus-k8s
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          args:
            - '--storage.tsdb.path=/prometheus'
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--web.enable-lifecycle'
          ports:
            - name: webui
              containerPort: 9090
          volumeMounts:
            # - name: prometheus-data
            #   mountPath: /prometheus
            - name: config-volume
              mountPath: /etc/prometheus
            - name: prometheus-pv-storage
              mountPath: /prometheus

      volumes:
        # - name: prometheus-data
        #   emptyDir: {}
        - name: config-volume
          configMap:
            name: prometheus-config
        - name: prometheus-pv-storage
          persistentVolumeClaim:
           claimName: prometheus-pv-claim
        # - name: prometheus-data
        #   hostPath:
        #     path: /tmp/prometheus
        #     type: DirectoryOrCreate
        # - name: prometheus-data
        #   persistentVolumeClaim:
        #     claimName: prometheus-persistent-volume-claim
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: alertmanager
  namespace: prommon
spec:
  replicas: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      name: alertmanager
      labels:
        app: alertmanager
    spec:
      containers:
      - name: alertmanager
        image: prom/alertmanager:latest
        ports:
        - name: alertmanager
          containerPort: 9093
---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: prommon
  labels:
    app: alertmanager
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: NodePort
  ports:
    - port: 9093
      nodePort: 32093
      protocol: TCP
      name: alertmanager
  selector:
    app: alertmanager
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: prommon
  labels:
    app: prometheus
  annotations:
    prometheus.io/scrape: 'true'
spec:
  type: NodePort
  ports:
    - port: 9090
      nodePort: 32090
      protocol: TCP
      name: webui
  selector:
    app: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus-k8s
  namespace: prommon
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources:
  - configmaps
  verbs: ["get"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus-k8s
  namespace: prommon

---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: prometheus-node-exporter
  namespace: prommon
  labels:
    app: node-exporter
spec:
  template:
    metadata:
      name: prometheus-node-exporter
      labels:
        app: node-exporter
    spec:
      containers:
      - image: prom/node-exporter:latest
        name: prometheus-node-exporter
        ports:
        - name: prom-node-exp
          #^ must be an IANA_SVC_NAME (at most 15 characters, ..)
          containerPort: 9100
          hostPort: 9100
      hostNetwork: true
      hostPID: true
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: node-exporter-test
  namespace: prommon
  labels:
    app: node-exporter-test
spec:
  replicas: 1
  template:
    metadata:
      name: node-exporter-test
      labels:
        app: node-exporter-test
    spec:
      containers:
      - image: prom/node-exporter:latest
        name: node-exporter-test
        ports:
        - name: prom-node-exp
          #^ must be an IANA_SVC_NAME (at most 15 characters, ..)
          containerPort: 9100
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
  name: prometheus-node-exporter
  namespace: prommon
  labels:
    app: node-exporter
spec:
  clusterIP: None
  ports:
    - name: prometheus-node-exporter
      port: 9100
      protocol: TCP
  selector:
    app: node-exporter
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: 'true'
  name: node-exporter-test
  namespace: prommon
  labels:
    app: node-exporter-test
spec:
  clusterIP: None
  ports:
    - name: node-exporter-test
      port: 9100
      protocol: TCP
  selector:
    app: node-exporter-test
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: grafana
  namespace: prommon
  labels:
    app: grafana
spec:
  replicas: 1
  template:
    metadata:
      name: grafana
      labels:
        app: grafana
    spec:
      securityContext:
        runAsUser: 0
      containers:
      - image: grafana/grafana:latest
        name: grafana
        ports:
        - name: grafana
          containerPort: 3000
        volumeMounts:
            - name: grafana-pv-storage
              mountPath: /var/lib/grafana
      volumes:
        - name: grafana-pv-storage
          persistentVolumeClaim:
           claimName: grafana-pv-claim
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: prommon
  labels:
    app: grafana
spec:
  ports:
    - name: grafana
      port: 3000
      nodePort: 32000
      protocol: TCP
  selector:
    app: grafana
  type: NodePort